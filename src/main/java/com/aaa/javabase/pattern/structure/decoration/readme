参考：https://mp.weixin.qq.com/s/oXHKvWX13RqJXe5d3u-qOw

装饰者模式介绍
    在不改变原有的对象的基础之上，将功能附加到对象之上。提供了比继承更有弹性的替代方案（扩展原有对象功能）

装饰器模式类结构如下：

    Component：组件接口类，定义被装饰类的基本功能

    ConcreteComponent：组件接口的基本实现类

    Decorator：装饰器角色类， 实现并持有一个 Component 对象实例

    ConcreteDecorator：装饰器的实现类

优点：
    1、继承的有力补充，比继承灵活，不改变原有对象的情况之下，给对象一个扩展功能。
    （继承在扩展功能是静态的，必须在编译时就确定好，而使用装饰者可以在程序运行时决定，
    装饰者也是建立在继承的基础之上的）
    2、通过使用不同的装饰类以及这些类的排列组合，可以实现不同的效果
    3、符合开闭原则

缺点：
    1、会出现更多的类，更多的代码，增加程序的复杂性
    2、动态装饰，多层装饰会更复杂。
    3、装饰环节如果很多的话，会造成装饰器类膨胀
    4、装饰器层层嵌套比较复杂，使用者必须清楚所有的装饰器类及其用途；
