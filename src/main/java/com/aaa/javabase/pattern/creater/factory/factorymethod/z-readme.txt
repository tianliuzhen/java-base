                                  # 23种设计模式之--工厂方法模式
# 工厂方法模式介绍：
   工厂方法（FactoryMethod）模式的定义：定义一个创建产品对象的工厂接口，<br/>
   将产品对象的实际创建工作推迟到具体子工厂类当中。<br/>
   这满足创建型模式中所要求的“创建与使用相分离”的特点。<br/>
   我们把被创建的对象称为“产品”，把创建产品的对象称为“工厂”。
   **如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”，它不属于 GoF 的 23 种经典设计模式。**<br/>
   它的缺点是增加新产品时会违背“开闭原则”。<br/>
   本节介绍的“工厂方法模式”是对简单工厂模式的进一步抽象化，<br/>
   其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。<br/>

# 优点：
   1、用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；<br/>
   2、在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；<br/>

# 缺点：
   1、每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。

## 模式的结构与实现：
   工厂方法模式由抽象工厂、具体工厂、抽象产品和具体产品等4个要素构成。本节来分析其基本结构和实现方法。
    1. 模式的结构
        工厂方法模式的主要角色如下：分别是抽象工厂、具体工厂、抽象产品、具体产品。
           【CarMakeFactory】
            1.1、抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。
           【AudiCarMakeFactory、BenzCarMakeFactory】
            1.2、具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。

           【Car】
            1.3、抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。
           【AudiCar、BenzCar】
            1.4、具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。
## 总结：
    虽然不少缺点，但是简单工厂方法还是应用的很广泛。


