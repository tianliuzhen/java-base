https://www.cnblogs.com/wyq178/p/11415877.html
https://blog.csdn.net/weixin_44181671/article/details/108630950

1、bean的加载工厂
    BeanFactory是个bean 工厂类接口，是负责生产和管理bean的工厂，是IOC容器最底层和基础的接口，
    spring用它来管理和装配普通bean的IOC容器,它有多种实现，
    比如AnnotationConfigApplicationContext、XmlWebApplicationContext等。

2、bean的加载过程
    org.springframework.context.support.AbstractApplicationContext.refresh
        ||
        org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization
            ||
            org.springframework.beans.factory.config.ConfigurableListableBeanFactory.preInstantiateSingletons
            ||
              org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String)
              ||
              org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean
                  ||
                  || （从三级缓存中检查检查是否已经创建好了bean）
                  org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(java.lang.String)
                  ||
                  || （单例或者原型模式创建bean）
                  org.springframework.beans.factory.support.AbstractBeanFactory.createBean
                      ||
                      org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean
                         ||
                         || # 实例化bean
                         org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance
                         ||
                         || （通过 addSingletonFactory 方法，在实例化之后，初始化之前，把早起暴露的对象放在三级缓存中。）
                         || # 属性注入bean
                         org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean
                         || # 初始化bean
                         org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)
                            || 执行后置处理器 BeanPostProcessor.postProcessBeforeInitialization
                            || invokeInitMethods （该方法中执行 InitializingBean ）
                            || 执行后置处理器 BeanPostProcessor.postProcessAfterInitialization

